{"version":3,"file":"xxhash-wasm.js","sources":["../src/index.js"],"sourcesContent":["// The .wasm is filled in by the build process, so the user doesn't need to load\n// xxhash.wasm by themselves because it's part of the bundle. Otherwise it\n// couldn't be distributed easily as the user would need to host xxhash.wasm\n// and then fetch it, to be able to use it.\n// eslint-disable-next-line no-undef\nconst wasmBytes = new Uint8Array(WASM_PRECOMPILED_BYTES);\n\nconst encoder = new TextEncoder();\n\nfunction writeBufferToMemory(buffer, memory, offset) {\n  if (memory.buffer.byteLength < buffer.byteLength + offset) {\n    const extraPages = Math.ceil(\n      (buffer.byteLength + offset - memory.buffer.byteLength) / (64 * 1024)\n    );\n    memory.grow(extraPages);\n  }\n  const u8memory = new Uint8Array(memory.buffer, offset);\n  u8memory.set(buffer);\n}\n\nasync function xxhash() {\n  const {\n    instance: { exports: { mem, xxh32, xxh64 } }\n  } = await WebAssembly.instantiate(wasmBytes);\n  return {\n    h32(str, seed = 0) {\n      const strBuffer = encoder.encode(str);\n      writeBufferToMemory(strBuffer, mem, 0);\n      // Logical shift right makes it an u32, otherwise it's interpreted as\n      // an i32.\n      const h32 = xxh32(0, strBuffer.byteLength, seed) >>> 0;\n      return h32.toString(16);\n    },\n    h64(str, seedHigh = 0, seedLow = 0) {\n      const strBuffer = encoder.encode(str);\n      writeBufferToMemory(strBuffer, mem, 8);\n      // The first word (64-bit) is used to communicate an u64 between\n      // JavaScript and WebAssembly. First the seed will be set from\n      // JavaScript and afterwards the result will be set from WebAssembly.\n      const dataView = new DataView(mem.buffer);\n      dataView.setUint32(0, seedHigh, true);\n      dataView.setUint32(4, seedLow, true);\n      xxh64(0, strBuffer.byteLength);\n      const h64 =\n        dataView.getUint32(0, true).toString(16) +\n        dataView.getUint32(4, true).toString(16);\n      return h64;\n    }\n  };\n}\n\nexport default xxhash;\n"],"names":["writeBufferToMemory","buffer","memory","offset","byteLength","extraPages","Math","ceil","grow","Uint8Array","set","wasmBytes","encoder","TextEncoder","async","WebAssembly","instantiate","instance","exports","mem","xxh32","xxh64","str","seed","strBuffer","encode","toString","seedHigh","seedLow","dataView","DataView","setUint32","getUint32"],"mappings":"AASA,SAASA,EAAoBC,EAAQC,EAAQC,MACvCD,EAAOD,OAAOG,WAAaH,EAAOG,WAAaD,EAAQ,OACnDE,EAAaC,KAAKC,MACrBN,EAAOG,WAAaD,EAASD,EAAOD,OAAOG,qBAEvCI,KAAKH,GAEG,IAAII,WAAWP,EAAOD,OAAQE,GACtCO,IAAIT,GAZf,MAAMU,EAAY,IAAIF,+yFAEhBG,EAAU,IAAIC,2BAapBC,8BAGYC,YAAYC,YAAYL,IADhCM,SAAYC,cAAWC,IAAAA,IAAKC,IAAAA,MAAOC,IAAAA,iBAG/BC,EAAKC,EAAO,SACRC,EAAYZ,EAAQa,OAAOH,YACbE,EAAWL,EAAK,IAGxBC,EAAM,EAAGI,EAAUpB,WAAYmB,KAAU,GAC1CG,SAAS,SAElBJ,EAAKK,EAAW,EAAGC,EAAU,SACzBJ,EAAYZ,EAAQa,OAAOH,KACbE,EAAWL,EAAK,SAI9BU,EAAW,IAAIC,SAASX,EAAIlB,iBACzB8B,UAAU,EAAGJ,GAAU,KACvBI,UAAU,EAAGH,GAAS,KACzB,EAAGJ,EAAUpB,YAEjByB,EAASG,UAAU,GAAG,GAAMN,SAAS,IACrCG,EAASG,UAAU,GAAG,GAAMN,SAAS"}