"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var dotenv = require("dotenv"), getGithubInfo = require("@changesets/get-github-info");

dotenv.config();

const changelogFunctions = {
  getDependencyReleaseLine: async (changesets, dependenciesUpdated, options) => {
    if (!options.repo) throw new Error('Please provide a repo to this changelog generator like this:\n"changelog": ["@changesets/changelog-github", { "repo": "org/repo" }]');
    if (0 === dependenciesUpdated.length) return "";
    return [ `- Updated dependencies [${(await Promise.all(changesets.map(async cs => {
      if (cs.commit) {
        let {links: links} = await getGithubInfo.getInfo({
          repo: options.repo,
          commit: cs.commit
        });
        return links.commit;
      }
    }))).filter(_ => _).join(", ")}]:`, ...dependenciesUpdated.map(dependency => `  - ${dependency.name}@${dependency.newVersion}`) ].join("\n");
  },
  getReleaseLine: async (changeset, type, options) => {
    if (!options.repo) throw new Error('Please provide a repo to this changelog generator like this:\n"changelog": ["@changesets/changelog-github", { "repo": "org/repo" }]');
    const [firstLine, ...futureLines] = changeset.summary.split("\n").map(l => l.trimRight());
    if (changeset.commit) {
      let {links: links} = await getGithubInfo.getInfo({
        repo: options.repo,
        commit: changeset.commit
      });
      return `\n\n- ${links.commit}${null === links.pull ? "" : ` ${links.pull}`}${null === links.user ? "" : ` Thanks ${links.user}!`} - ${firstLine}\n${futureLines.map(l => `  ${l}`).join("\n")}`;
    }
    return `\n\n- ${firstLine}\n${futureLines.map(l => `  ${l}`).join("\n")}`;
  }
};

exports.default = changelogFunctions;
